#골드3 ACM Craft

#1차시도(실패)
#include<iostream>
#include<vector>
using namespace std;

void dfs(vector<vector<int>> &arr, int now, int cost, int &max, vector<int> &times) {
    if(arr[now].empty()) {
        if(cost > max)
            max = cost;
        return;
    }
    for(auto i : arr[now]) 
        dfs(arr, i, cost+times[i], max, times);
}

int main(void) {
    vector<int> answer;
    int TC;
    cin >> TC;
    while(TC--) {
        int N, K;
        cin >> N >> K;
        vector<int> times;
        for(int i=0, input; i<N; i++) {
            cin >> input;
            times.push_back(input);
        }
        vector<vector<int>> arr(N, vector<int>());
        for(int i=0; i<K; i++) {
            int x, y;
            cin >> x >> y;
            arr[y-1].push_back(x-1);
        } 
        int W;
        cin >> W;
        W--;
        int max = 0;
        dfs(arr, W, times[W], max, times);
        answer.push_back(max);
    }
    for(auto i : answer)
        cout << i << endl;
    return 0;
}

깊이우선 탐색을 이용하여 종점까지 가장 오래걸리는 시간이 정답이라고 판단하여 코드를 작성했으나
시간초과가 발생했다.

#2차시도 (실패)
#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int func(vector<vector<int>> &arr, vector<int>times, int start, int len) {
    priority_queue<pair<int, int>> que;
    vector<int> dist (len, 0);
    que.emplace(times[start], start);
    dist[start] = times[start];
    int max = dist[start];
    while(!que.empty()) {
        int cost = que.top().first;
        int dest = que.top().second;
        que.pop();

        for(int i=0; i<arr[dest].size(); i++) {
            int next = arr[dest][i];
            int nCost = times[arr[dest][i]];

            if(dist[next] < cost + nCost) {
                dist[next] = cost + nCost;
                que.emplace(dist[next], next);
            }

            if(dist[next] > max)
                max = dist[next];
        }
    }
    return max;
}
int main(void) {
    vector<int> answer;
    int TC;
    cin >> TC;
    while(TC--) {
        int N, K;
        cin >> N >> K;
        vector<int> times;
        for(int i=0, input; i<N; i++) {
            cin >> input;
            times.push_back(input);
        }
        vector<vector<int>> arr(N, vector<int>());
        for(int i=0; i<K; i++) {
            int x, y;
            cin >> x >> y;
            arr[y-1].push_back(x-1);
        } 
        int W;
        cin >> W;
        W--;
        int an = func(arr, times, W, N);
        answer.push_back(an);
    }
    for(auto i : answer)
        cout << i << endl;
    return 0;
}

시간을 줄이기 위해 우선순위큐를 이용한 다익스트라를 응용하여 코드를 작성했으나
여전히 시간초과가 발생했다.
가장 오래걸리는 길을 찾는 방식말고 다른 방법으로 접근해봐야 할 것 같다.
#LV3 경주로 건설

#1차시도 (실패)
def func(arr, i, j, w, cost, costarr =[], visted=[]):
    if i == len(arr)-2 and j == len(arr)-2:
        costarr.append(cost)
        return
    
    t = [(i,j+1, 0,), (i+1, j, 1), (i,j-1, 0), (i-1, j, 1)]
    t = sorted([(ii, jj, ww, (ww!=w)*500+100) for ii, jj, ww in t], key= lambda x:x[3])
    
    visted.append([i,j])
    for ii, jj , ww, c in t:
        if arr[ii][jj] != 1 and [ii, jj] not in visted:
            func(arr, ii, jj, ww, cost + c, costarr, visted)
            
def solution(board):
    arr = [[1 for _ in range(len(board)+2)]]
    for i in range(len(board)):
        arr.append([1] + board[i] + [1])
    arr.append([1 for _ in range(len(board)+2)])
    
    v = []
    h = []
    func(arr, 1, 1, 0, 0, costarr=v, visted=[])
    func(arr, 1, 1, 1, 0, costarr=h, visted=[])
    return min(v+h)
dfs알고리즘 느낌으로 현재 진행방향을 고려하여 다음 노드를 선택하는 방식으로 코드를 작성해봤으며
시작지점에서는 이전 방향이 존재하지 않기 때문에 두 가지의 방향으로 출발했을 때의 값을 구하도록 했는데
절반 정도 케이스에서 실패했다.
어느 부분에서 예외가 발생 햇는지 찾아봐야 할 것 같다.

#2차시도 (실패)
from collections import deque
import heapq 

def checkNode(arr, x, y):
    if x < 0 or x >= len(arr) or y < 0 or y >= len(arr) or arr[y][x] == 1:
        return False
    return True
def solution(board):
    costArr = [[9999999 for _ in range(len(board))] for _ in range(len(board))]
    costArr[0][0] = 0
    que = deque([(0,0,0,0,0)])
    while que:
        t = []
        for cost, nx, ny, bx, by in que:
            for x, y in [(1,0), (0,1), (-1,0), (0,-1)]:
                if checkNode(board, nx+x, ny+y):
                    c = 1
                    if nx+x != bx and ny+y != by:
                        c+= 5
                    n = costArr[ny][nx]+c
                    if n < costArr[ny+y][nx+x]:
                        heapq.heappush(t, (n, nx+x, ny+y, nx, ny))
                        costArr[ny+y][nx+x] = n
        que = t    
    return costArr[-1][-1] * 100
bfs 알고리즘을 이용하여 풀어보려 했으나 기본으로 주어진 테스트케이스에서부터 통과하지 못해서
살짝 변형하여 cost가 낮은 것부터 경로를 계산하는 방식으로 풀었으나 3분에 1정도의 케이스에서 실패했다.

#3차시도 (성공)
from collections import deque
import heapq 
def checkNode(arr, x, y):
    if x < 0 or x >= len(arr) or y < 0 or y >= len(arr) or arr[y][x] == 1:
        return False
    return True
def solution(board):
    costArr = [[9999999 for _ in range(len(board))] for _ in range(len(board))]
    costArr[0][0] = 0
    vist = []
    que = deque([(0,0,0,0,0)])
    while que:
        cost, nx, ny, bx, by = que.popleft()
        que = list(que)
        heapq.heapify(que)
        for x, y in [(1,0), (0,1), (-1,0), (0,-1)]:
            if checkNode(board, nx+x, ny+y) and (nx+x, ny+y, bx, by) not in vist:
                vist.append((nx+x, ny+y, bx, by))
                c = 1
                if nx+x != bx and ny+y != by:
                    c+= 5
                n = cost+c
                heapq.heappush(que, (n, nx+x, ny+y, nx, ny))
                if n < costArr[ny+y][nx+x]:
                    costArr[ny+y][nx+x] = n
        que = deque(que)
    return costArr[-1][-1] * 100
이전 코드에서는 현재가격을 기준으로 길을 판단 했었는데 그렇게 하면 현재길은 비싸지만 다음 길이 더 싼 경우를
고려하지 않게 되어 가장 싼 가격을 기준으로 하되, 모든 길을 판단하고 3개의 노드를 기준으로 방문지를 설정하여
코스트를 계산하도록 했다.
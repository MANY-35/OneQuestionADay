#LV3 광고 삽입

#1차 시도 (실패)
def StrtoSec(s):
    h, m ,s = list(map(int, s.split(":")))
    return ((h*60)+m)*60 + s
def SectoStr(n):
    s, n = n%60, n//60
    m, h = n%60, n//60
    return ":".join([str(h).zfill(2), str(m).zfill(2), str(s).zfill(2)])

def solution(play_time, adv_time, logs):
    play = StrtoSec(play_time)
    abv = StrtoSec(adv_time)
    timeline = [0 for _ in range(play+2)]

    density = [0, play, 0]
    for log in logs:
        s, e = map(StrtoSec, list(log.split('-')))
        timeline[s] += 1
        timeline[e+1] -= 1

    d = [0, len(timeline)]
    for i in range(1, len(timeline)):
        timeline[i] += timeline[i-1]
        if timeline[i] > d[0]:
            d[0], d[1] = timeline[i], i
    l = d[1]
    r = d[1]
    while r-l <= abv:
        if l > 0 and timeline[l-1] >= timeline[r]:
            l-=1
        else:
            r+=1
    return SectoStr(l)

누적합 개념을 사용하여 배열로 시간의 밀집도를 구하고 가장 밀집이 높은 점부터
좌우로 펼쳐나가면서 시간을 구하고자 했으나, 절반 이상의 케이스에서 실패했다.
시간 초과를 예상하였으나 의외로 시간은 오래 걸리지 않았음